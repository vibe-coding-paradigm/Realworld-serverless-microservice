name: Update Backend Service

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy-cdk.yml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      cluster-name: ${{ steps.deploy-outputs.outputs.cluster-name }}
      service-name: ${{ steps.deploy-outputs.outputs.service-name }}
      deployment-status: ${{ steps.deploy-outputs.outputs.deployment-status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js for CDK
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: infra/package-lock.json
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd backend
          docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      
      - name: Check infrastructure exists
        run: |
          # Check if CDK stack exists - if not, fail with helpful message
          if ! aws cloudformation describe-stacks --stack-name ConduitStack &>/dev/null; then
            echo "‚ùå Error: Infrastructure not found!"
            echo "Please run initial deployment locally first:"
            echo "  make cdk-deploy"
            echo ""
            echo "This workflow only handles service updates after initial infrastructure deployment."
            exit 1
          fi
          echo "‚úÖ Infrastructure exists, proceeding with service update..."
      
      - name: Force ECS service update with new image
        run: |
          aws ecs update-service \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --service ${{ vars.ECS_SERVICE }} \
            --force-new-deployment
      
      - name: Wait for service to be stable
        run: |
          echo "Waiting for ECS service to be stable..."
          
          # Wait with timeout and retry logic
          max_attempts=15
          attempt=0
          
          while [ $attempt -lt $max_attempts ]; do
            status=$(aws ecs describe-services \
              --cluster ${{ vars.ECS_CLUSTER }} \
              --services ${{ vars.ECS_SERVICE }} \
              --query 'services[0].{RunningCount:runningCount,DesiredCount:desiredCount}' \
              --output text)
            
            running=$(echo $status | cut -d' ' -f1)
            desired=$(echo $status | cut -d' ' -f2)
            
            echo "Attempt $((attempt + 1))/$max_attempts: Running=$running, Desired=$desired"
            
            if [ "$running" = "$desired" ] && [ "$running" != "0" ]; then
              echo "‚úÖ ECS service is stable with $running/$desired tasks running"
              exit 0
            fi
            
            attempt=$((attempt + 1))
            if [ $attempt -lt $max_attempts ]; then
              echo "Waiting 30 seconds before next check..."
              sleep 30
            fi
          done
          
          echo "‚ùå Service did not stabilize within expected time"
          exit 1
      
      - name: Get service status and outputs
        id: deploy-outputs
        run: |
          echo "=== ECS Service Status ==="
          aws ecs describe-services \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --services ${{ vars.ECS_SERVICE }} \
            --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount}' \
            --output table
          
          # Set outputs for verification job
          echo "cluster-name=${{ vars.ECS_CLUSTER }}" >> $GITHUB_OUTPUT
          echo "service-name=${{ vars.ECS_SERVICE }}" >> $GITHUB_OUTPUT  
          echo "deployment-status=completed" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Deployment completed successfully"

  verify:
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js for verification
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Verify deployment with AWS SDK
        env:
          ECS_CLUSTER: ${{ needs.deploy.outputs.cluster-name }}
          ECS_SERVICE: ${{ needs.deploy.outputs.service-name }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
        run: |
          echo "üîç Starting comprehensive deployment verification..."
          echo "Verifying deployment of:"
          echo "  - Cluster: $ECS_CLUSTER"
          echo "  - Service: $ECS_SERVICE"
          echo "  - Region: $AWS_REGION"
          echo "  - Repository: $ECR_REPOSITORY"
          echo ""
          
          # Install verification script dependencies
          cd scripts
          npm install
          
          # Wait a moment for tasks to transition from PROVISIONING to RUNNING
          echo "‚è≥ Waiting 30 seconds for tasks to complete provisioning..."
          sleep 30
          
          # Run comprehensive deployment verification
          node verify-deployment.js
      
      - name: Test health endpoint
        env:
          ECS_CLUSTER: ${{ needs.deploy.outputs.cluster-name }}
          ECS_SERVICE: ${{ needs.deploy.outputs.service-name }}
        run: |
          # Get the first running task's public IP
          TASK_ARN=$(aws ecs list-tasks \
            --cluster $ECS_CLUSTER \
            --service-name $ECS_SERVICE \
            --desired-status RUNNING \
            --query 'taskArns[0]' \
            --output text)
          
          if [ "$TASK_ARN" != "None" ] && [ "$TASK_ARN" != "" ]; then
            PUBLIC_IP=$(aws ecs describe-tasks \
              --cluster $ECS_CLUSTER \
              --tasks $TASK_ARN \
              --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' \
              --output text | xargs -I {} aws ec2 describe-network-interfaces \
              --network-interface-ids {} \
              --query 'NetworkInterfaces[0].Association.PublicIp' \
              --output text)
            
            if [ "$PUBLIC_IP" != "None" ] && [ "$PUBLIC_IP" != "" ]; then
              echo "Testing health endpoint at: http://$PUBLIC_IP:8080/health"
              
              # Wait for service to be ready with retry logic
              max_health_attempts=10
              health_attempt=0
              
              while [ $health_attempt -lt $max_health_attempts ]; do
                echo "Health check attempt $((health_attempt + 1))/$max_health_attempts"
                
                if curl -f --connect-timeout 10 --max-time 30 "http://$PUBLIC_IP:8080/health"; then
                  echo "‚úÖ Health check passed!"
                  break
                else
                  health_attempt=$((health_attempt + 1))
                  if [ $health_attempt -lt $max_health_attempts ]; then
                    echo "Health check failed, waiting 30 seconds..."
                    sleep 30
                  else
                    echo "‚ùå Health check failed after $max_health_attempts attempts"
                    exit 1
                  fi
                fi
              done
            else
              echo "‚ö†Ô∏è  Could not get public IP for health check (this is expected for private networks)"
              echo "Skipping health check as service verification was successful"
            fi
          else
            echo "‚ö†Ô∏è  No running tasks found for health check"
            echo "Service verification was successful, skipping direct health check"
          fi