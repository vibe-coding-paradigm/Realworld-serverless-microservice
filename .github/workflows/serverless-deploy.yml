name: Deploy Serverless Lambda Functions

on:
  push:
    branches: [main]
    paths:
      - 'infra/lambda-functions/**'
      - 'infra/lib/serverless-*-stack.ts'
      - '.github/workflows/serverless-deploy.yml'
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy (all, auth, articles, comments)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - auth
          - articles
          - comments

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      auth-changed: ${{ steps.changes.outputs.auth }}
      articles-changed: ${{ steps.changes.outputs.articles }}
      comments-changed: ${{ steps.changes.outputs.comments }}
      infra-changed: ${{ steps.changes.outputs.infra }}
      deploy-all: ${{ steps.check-deploy.outputs.deploy-all }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger - deploy based on input
            SERVICE="${{ github.event.inputs.service }}"
            if [ "$SERVICE" = "all" ]; then
              echo "auth=true" >> $GITHUB_OUTPUT
              echo "articles=true" >> $GITHUB_OUTPUT  
              echo "comments=true" >> $GITHUB_OUTPUT
              echo "infra=true" >> $GITHUB_OUTPUT
            else
              echo "auth=false" >> $GITHUB_OUTPUT
              echo "articles=false" >> $GITHUB_OUTPUT
              echo "comments=false" >> $GITHUB_OUTPUT
              echo "infra=false" >> $GITHUB_OUTPUT
              echo "${SERVICE}=true" >> $GITHUB_OUTPUT
            fi
          else
            # Automatic trigger - detect changes
            if git diff --name-only HEAD~1 | grep -E '^infra/lambda-functions/auth/' > /dev/null; then
              echo "auth=true" >> $GITHUB_OUTPUT
            else
              echo "auth=false" >> $GITHUB_OUTPUT
            fi
            
            if git diff --name-only HEAD~1 | grep -E '^infra/lambda-functions/articles/' > /dev/null; then
              echo "articles=true" >> $GITHUB_OUTPUT
            else
              echo "articles=false" >> $GITHUB_OUTPUT
            fi
            
            if git diff --name-only HEAD~1 | grep -E '^infra/lambda-functions/comments/' > /dev/null; then
              echo "comments=true" >> $GITHUB_OUTPUT
            else
              echo "comments=false" >> $GITHUB_OUTPUT
            fi
            
            if git diff --name-only HEAD~1 | grep -E '^infra/lib/serverless-.*-stack\.ts$' > /dev/null; then
              echo "infra=true" >> $GITHUB_OUTPUT
            else
              echo "infra=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Check if should deploy all
        id: check-deploy
        run: |
          if [ "${{ steps.changes.outputs.infra }}" = "true" ]; then
            echo "deploy-all=true" >> $GITHUB_OUTPUT
          else
            echo "deploy-all=false" >> $GITHUB_OUTPUT
          fi

  deploy-serverless:
    needs: detect-changes
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      auth-api-url: ${{ steps.get-outputs.outputs.auth-api-url }}
      articles-api-url: ${{ steps.get-outputs.outputs.articles-api-url }}
      comments-api-url: ${{ steps.get-outputs.outputs.comments-api-url }}
      deployment-status: ${{ steps.get-outputs.outputs.deployment-status }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js for CDK
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: infra/package-lock.json

      - name: Setup Go for Lambda functions
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install CDK dependencies
        run: |
          cd infra
          npm ci

      - name: Build Lambda functions
        run: |
          echo "üî® Building Lambda functions..."
          
          # Build Auth functions if changed or deploy all
          if [ "${{ needs.detect-changes.outputs.auth-changed }}" = "true" ] || [ "${{ needs.detect-changes.outputs.deploy-all }}" = "true" ]; then
            echo "Building Auth Lambda functions..."
            cd infra/lambda-functions/auth
            go mod tidy
            GOOS=linux GOARCH=amd64 go build -o register register.go
            GOOS=linux GOARCH=amd64 go build -o login login.go  
            GOOS=linux GOARCH=amd64 go build -o getuser getuser.go
            cd ../../..
          fi
          
          # Build Articles functions if changed or deploy all
          if [ "${{ needs.detect-changes.outputs.articles-changed }}" = "true" ] || [ "${{ needs.detect-changes.outputs.deploy-all }}" = "true" ]; then
            echo "Building Articles Lambda functions..."
            cd infra/lambda-functions/articles
            go mod tidy
            GOOS=linux GOARCH=amd64 go build -o list_articles list_articles.go
            GOOS=linux GOARCH=amd64 go build -o get_article get_article.go
            GOOS=linux GOARCH=amd64 go build -o create_article create_article.go
            GOOS=linux GOARCH=amd64 go build -o update_article update_article.go
            GOOS=linux GOARCH=amd64 go build -o delete_article delete_article.go
            GOOS=linux GOARCH=amd64 go build -o favorite_article favorite_article.go
            cd ../../..
          fi
          
          # Build Comments functions if changed or deploy all
          if [ "${{ needs.detect-changes.outputs.comments-changed }}" = "true" ] || [ "${{ needs.detect-changes.outputs.deploy-all }}" = "true" ]; then
            echo "Building Comments Lambda functions..."
            cd infra/lambda-functions/comments
            go mod tidy
            GOOS=linux GOARCH=amd64 go build -o list_comments list_comments.go
            GOOS=linux GOARCH=amd64 go build -o create_comment create_comment.go
            GOOS=linux GOARCH=amd64 go build -o delete_comment delete_comment.go
            cd ../../..
          fi

      - name: Deploy serverless stacks with CDK
        run: |
          cd infra
          
          echo "üöÄ Deploying serverless infrastructure..."
          
          # Deploy only changed stacks or all if infra changed
          if [ "${{ needs.detect-changes.outputs.deploy-all }}" = "true" ]; then
            echo "Deploying all serverless stacks..."
            npx cdk deploy --require-approval never
          else
            # Deploy individual stacks based on changes
            if [ "${{ needs.detect-changes.outputs.auth-changed }}" = "true" ]; then
              echo "Deploying Auth stack..."
              npx cdk deploy ConduitStack/ServerlessAuth --require-approval never
            fi
            
            if [ "${{ needs.detect-changes.outputs.articles-changed }}" = "true" ]; then
              echo "Deploying Articles stack..."
              npx cdk deploy ConduitStack/ServerlessArticles --require-approval never
            fi
            
            if [ "${{ needs.detect-changes.outputs.comments-changed }}" = "true" ]; then
              echo "Deploying Comments stack..."
              npx cdk deploy ConduitStack/ServerlessComments --require-approval never
            fi
          fi

      - name: Get deployment outputs
        id: get-outputs
        run: |
          echo "üìã Getting deployment outputs..."
          
          # Get API URLs from CloudFormation stack outputs
          AUTH_API_URL=$(aws cloudformation describe-stacks \
            --stack-name ConduitStack \
            --query 'Stacks[0].Outputs[?OutputKey==`AuthApiUrl`].OutputValue' \
            --output text --region ${{ vars.AWS_REGION }} 2>/dev/null || echo "")
          
          COMBINED_API_URL=$(aws cloudformation describe-stacks \
            --stack-name ConduitStack \
            --query 'Stacks[0].Outputs[?OutputKey==`CombinedApiUrl`].OutputValue' \
            --output text --region ${{ vars.AWS_REGION }} 2>/dev/null || echo "")
          
          echo "Auth API URL: $AUTH_API_URL"
          echo "Combined API URL: $COMBINED_API_URL"
          
          # Set outputs
          echo "auth-api-url=$AUTH_API_URL" >> $GITHUB_OUTPUT
          echo "articles-api-url=$COMBINED_API_URL" >> $GITHUB_OUTPUT
          echo "comments-api-url=$COMBINED_API_URL" >> $GITHUB_OUTPUT
          echo "deployment-status=completed" >> $GITHUB_OUTPUT
          
          # Update GitHub variable for frontend
          if [ ! -z "$COMBINED_API_URL" ]; then
            echo "üîÑ Updating BACKEND_API_URL variable..."
            gh variable set BACKEND_API_URL --body "$COMBINED_API_URL"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  verify-deployment:
    needs: deploy-serverless
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Verify Lambda functions
        run: |
          echo "üîç Verifying Lambda function deployments..."
          
          # List all Conduit Lambda functions
          aws lambda list-functions \
            --query 'Functions[?starts_with(FunctionName, `conduit-`)].{Name:FunctionName,Runtime:Runtime,LastModified:LastModified}' \
            --output table
          
          echo "‚úÖ Lambda functions verified"

      - name: Test API endpoints
        env:
          API_URL: ${{ needs.deploy-serverless.outputs.articles-api-url }}
        run: |
          if [ ! -z "$API_URL" ]; then
            echo "üß™ Testing API endpoints..."
            echo "API URL: $API_URL"
            
            # Test health endpoint (if available)
            if curl -f --connect-timeout 10 --max-time 30 "$API_URL/health" > /dev/null 2>&1; then
              echo "‚úÖ Health endpoint responding"
            else
              echo "‚ö†Ô∏è  Health endpoint not available (expected for Lambda-only deployment)"
            fi
            
            # Test articles endpoint
            if curl -f --connect-timeout 10 --max-time 30 "$API_URL/v1/articles" > /dev/null 2>&1; then
              echo "‚úÖ Articles endpoint responding"
            else
              echo "‚ö†Ô∏è  Articles endpoint test failed - may need warm-up"
            fi
          else
            echo "‚ö†Ô∏è  No API URL available for testing"
          fi

      - name: Summary
        run: |
          echo "üéâ Serverless deployment completed!"
          echo ""
          echo "üìä Deployment Summary:"
          echo "  Status: ${{ needs.deploy-serverless.outputs.deployment-status }}"
          echo "  Auth API: ${{ needs.deploy-serverless.outputs.auth-api-url }}"
          echo "  Articles API: ${{ needs.deploy-serverless.outputs.articles-api-url }}"
          echo "  Comments API: ${{ needs.deploy-serverless.outputs.comments-api-url }}"
          echo ""
          echo "üîó Next steps:"
          echo "  - Run E2E tests: gh workflow run e2e-tests.yml"
          echo "  - Check GitHub variable BACKEND_API_URL has been updated"
          echo "  - Frontend will automatically use new serverless backend"