name: Deploy Infrastructure

on:
  push:
    branches: [main]
    paths:
      - 'infra/lib/**'
      - 'infra/bin/**'
      - 'infra/lambda-functions/**'  # Lambda Ìï®Ïàò ÏΩîÎìú Î≥ÄÍ≤ΩÎèÑ Î∞∞Ìè¨ Ìä∏Î¶¨Í±∞
      - 'infra/cdk.json'
      - 'infra/package*.json'
      - '.github/workflows/infra-deploy.yml'
  workflow_dispatch:
    inputs:
      stack:
        description: 'Stack to deploy (all, compute, storage)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - compute
          - storage
      destroy:
        description: 'Destroy infrastructure instead of deploy'
        required: false
        default: false
        type: boolean

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      compute-changed: ${{ steps.changes.outputs.compute }}
      storage-changed: ${{ steps.changes.outputs.storage }}
      serverless-changed: ${{ steps.changes.outputs.serverless }}
      deploy-all: ${{ steps.changes.outputs.deploy-all }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect infrastructure changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger
            STACK="${{ github.event.inputs.stack }}"
            if [ "$STACK" = "all" ]; then
              echo "compute=true" >> $GITHUB_OUTPUT
              echo "storage=true" >> $GITHUB_OUTPUT
              echo "serverless=true" >> $GITHUB_OUTPUT
              echo "deploy-all=true" >> $GITHUB_OUTPUT
            else
              echo "compute=false" >> $GITHUB_OUTPUT
              echo "storage=false" >> $GITHUB_OUTPUT
              echo "serverless=false" >> $GITHUB_OUTPUT
              echo "deploy-all=false" >> $GITHUB_OUTPUT
              echo "${STACK}=true" >> $GITHUB_OUTPUT
            fi
          else
            # Automatic detection (include added files)
            if git diff --name-only --diff-filter=ACMR HEAD~1 | grep -E '^infra/lib/compute-stack\.ts$' > /dev/null; then
              echo "compute=true" >> $GITHUB_OUTPUT
            else
              echo "compute=false" >> $GITHUB_OUTPUT
            fi
            
            if git diff --name-only --diff-filter=ACMR HEAD~1 | grep -E '^infra/lib/storage-stack\.ts$' > /dev/null; then
              echo "storage=true" >> $GITHUB_OUTPUT
            else
              echo "storage=false" >> $GITHUB_OUTPUT
            fi
            
            if git diff --name-only --diff-filter=ACMR HEAD~1 | grep -E '^infra/lib/(serverless-.*-stack\.ts|infra-stack\.ts|.*-stack\.ts)$|^infra/bin/|^infra/cdk\.json$|^infra/package.*\.json$' > /dev/null; then
              echo "serverless=true" >> $GITHUB_OUTPUT
              echo "deploy-all=true" >> $GITHUB_OUTPUT
            else
              echo "serverless=false" >> $GITHUB_OUTPUT
              echo "deploy-all=false" >> $GITHUB_OUTPUT
            fi
          fi

  deploy-infrastructure:
    needs: detect-changes
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      cluster-name: ${{ steps.outputs.outputs.cluster-name }}
      load-balancer-url: ${{ steps.outputs.outputs.load-balancer-url }}
      deployment-status: ${{ steps.outputs.outputs.deployment-status }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js for CDK
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: infra/package-lock.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install CDK dependencies
        run: |
          cd infra
          npm ci

      - name: CDK Bootstrap (if needed)
        run: |
          cd infra
          # Check if bootstrap is needed
          if ! aws cloudformation describe-stacks --stack-name CDKToolkit &>/dev/null; then
            echo "üèóÔ∏è Bootstrapping CDK..."
            npx cdk bootstrap
          else
            echo "‚úÖ CDK already bootstrapped"
          fi

      - name: Destroy infrastructure (if requested)
        if: github.event.inputs.destroy == 'true'
        run: |
          cd infra
          echo "üóëÔ∏è Destroying infrastructure..."
          npx cdk destroy --force
          echo "‚úÖ Infrastructure destroyed"
          exit 0

      - name: Deploy infrastructure with CDK
        run: |
          cd infra
          
          echo "üöÄ Deploying infrastructure..."
          
          # Deploy single stack with nested stacks
          echo "Deploying ConduitStack with nested serverless stacks..."
          npx cdk deploy ConduitStack --require-approval never --outputs-file cdk-outputs.json

      - name: Get deployment outputs
        id: outputs
        run: |
          cd infra
          
          echo "üìã Getting infrastructure outputs..."
          
          # Get cluster name
          CLUSTER_NAME=$(aws cloudformation describe-stacks \
            --stack-name ConduitStack \
            --query 'Stacks[0].Outputs[?OutputKey==`ClusterName`].OutputValue' \
            --output text --region ${{ vars.AWS_REGION }} 2>/dev/null || echo "")
          
          # Get load balancer URL (if exists)
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names conduit-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text --region ${{ vars.AWS_REGION }} 2>/dev/null || echo "")
          
          if [ "$ALB_DNS" != "None" ] && [ ! -z "$ALB_DNS" ]; then
            LB_URL="http://$ALB_DNS"
          else
            LB_URL=""
          fi
          
          # Get API Gateway URL (Serverless)
          API_GATEWAY_URL=$(aws cloudformation describe-stacks \
            --stack-name ConduitStack \
            --query 'Stacks[0].Outputs[?OutputKey==`ServerlessApiUrl`].OutputValue' \
            --output text --region ${{ vars.AWS_REGION }} 2>/dev/null || echo "")
          
          # Use API Gateway URL directly (no /api suffix needed)
          if [ ! -z "$API_GATEWAY_URL" ] && [ "$API_GATEWAY_URL" != "None" ]; then
            # Remove trailing slash
            BACKEND_URL=$(echo "$API_GATEWAY_URL" | sed 's/\/$//')
          else
            BACKEND_URL=""
          fi
          
          echo "Cluster: $CLUSTER_NAME"
          echo "Load Balancer: $LB_URL"
          echo "API Gateway: $API_GATEWAY_URL"
          echo "Backend URL: $BACKEND_URL"
          
          # Set outputs
          echo "cluster-name=$CLUSTER_NAME" >> $GITHUB_OUTPUT
          echo "load-balancer-url=$LB_URL" >> $GITHUB_OUTPUT
          echo "api-gateway-url=$API_GATEWAY_URL" >> $GITHUB_OUTPUT
          echo "backend-url=$BACKEND_URL" >> $GITHUB_OUTPUT
          echo "deployment-status=completed" >> $GITHUB_OUTPUT

  update-github-variables:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    if: needs.deploy-infrastructure.outputs.backend-url != ''
    
    steps:
      - name: Update GitHub Variables
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const backendUrl = '${{ needs.deploy-infrastructure.outputs.backend-url }}';
            
            if (backendUrl && backendUrl !== '') {
              console.log(`üîß Updating BACKEND_URL to: ${backendUrl}`);
              
              try {
                await github.rest.actions.updateRepoVariable({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: 'BACKEND_URL',
                  value: backendUrl
                });
                
                console.log('‚úÖ BACKEND_URL updated successfully');
              } catch (error) {
                console.error('‚ùå Failed to update BACKEND_URL:', error.message);
                throw error;
              }
            } else {
              console.log('‚ö†Ô∏è No backend URL found, skipping variable update');
            }

  verify-infrastructure:
    needs: [deploy-infrastructure, update-github-variables]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Verify ECS infrastructure
        if: needs.deploy-infrastructure.outputs.cluster-name != ''
        run: |
          echo "üîç Verifying ECS infrastructure..."
          
          CLUSTER="${{ needs.deploy-infrastructure.outputs.cluster-name }}"
          
          if [ ! -z "$CLUSTER" ]; then
            echo "ECS Cluster: $CLUSTER"
            aws ecs describe-clusters --clusters "$CLUSTER" --query 'clusters[0].{Name:clusterName,Status:status,ActiveServices:activeServicesCount,RunningTasks:runningTasksCount}' --output table
          fi

      - name: Verify DynamoDB tables
        run: |
          echo "üîç Verifying DynamoDB tables..."
          
          # List Conduit tables
          aws dynamodb list-tables --query 'TableNames[?starts_with(@, `conduit-`)]' --output table

      - name: Verify Lambda functions
        run: |
          echo "üîç Verifying Lambda functions..."
          
          # List Conduit Lambda functions
          aws lambda list-functions --query 'Functions[?starts_with(FunctionName, `conduit-`)].{Name:FunctionName,Runtime:Runtime,State:State}' --output table

      - name: Test load balancer (if exists)
        if: needs.deploy-infrastructure.outputs.load-balancer-url != ''
        env:
          LB_URL: ${{ needs.deploy-infrastructure.outputs.load-balancer-url }}
        run: |
          echo "üß™ Testing load balancer..."
          echo "Load Balancer URL: $LB_URL"
          
          # Test health endpoint with retry
          max_attempts=3
          attempt=0
          
          while [ $attempt -lt $max_attempts ]; do
            if curl -f --connect-timeout 10 --max-time 30 "$LB_URL/health" > /dev/null 2>&1; then
              echo "‚úÖ Load balancer health check passed"
              break
            else
              attempt=$((attempt + 1))
              if [ $attempt -lt $max_attempts ]; then
                echo "Retrying health check in 10 seconds..."
                sleep 10
              else
                echo "‚ö†Ô∏è  Load balancer health check failed - may be warming up"
              fi
            fi
          done

      - name: Summary
        run: |
          echo "üéâ Infrastructure deployment completed!"
          echo ""
          echo "üìä Infrastructure Summary:"
          echo "  Status: ${{ needs.deploy-infrastructure.outputs.deployment-status }}"
          echo "  ECS Cluster: ${{ needs.deploy-infrastructure.outputs.cluster-name }}"
          echo "  Load Balancer: ${{ needs.deploy-infrastructure.outputs.load-balancer-url }}"
          echo ""
          echo "üîó Available resources:"
          echo "  - ECS Cluster for container workloads"
          echo "  - DynamoDB tables for serverless data"
          echo "  - Lambda functions for serverless compute"
          echo "  - Load balancer for HTTP traffic routing"
          echo ""
          echo "üîó Next steps:"
          echo "  - Deploy serverless functions: gh workflow run serverless-deploy.yml"
          echo "  - Deploy backend services: gh workflow run backend-deploy.yml"
          echo "  - Run E2E tests: gh workflow run e2e-tests.yml"

  trigger-e2e-tests:
    needs: [verify-infrastructure, update-github-variables]
    runs-on: ubuntu-latest
    if: needs.deploy-infrastructure.outputs.deployment-status == 'completed'
    
    steps:
      - name: Trigger E2E Tests
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('üöÄ Triggering E2E tests after infrastructure deployment...');
            
            const { owner, repo } = context.repo;
            
            try {
              const response = await github.rest.actions.createWorkflowDispatch({
                owner,
                repo,
                workflow_id: 'e2e-tests.yml',
                ref: 'main',
                inputs: {
                  backend_url: '${{ vars.BACKEND_URL }}',
                  frontend_url: '${{ vars.FRONTEND_URL }}',
                  force_run: 'true'
                }
              });
              
              console.log('‚úÖ E2E tests workflow triggered successfully');
              console.log(`Using backend URL: ${{ vars.BACKEND_URL }}`);
              console.log(`Using frontend URL: ${{ vars.FRONTEND_URL }}`);
              
            } catch (error) {
              console.error('‚ùå Failed to trigger E2E tests:', error.message);
              // Don't fail the infrastructure deployment if E2E trigger fails
              console.log('‚ö†Ô∏è Continuing despite E2E trigger failure...');
            }