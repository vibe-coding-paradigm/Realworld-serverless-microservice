name: E2E Tests

on:
  # 백엔드와 프론트엔드 배포 워크플로우 완료 시 트리거
  workflow_run:
    workflows: ["Deploy Backend to AWS", "Deploy Frontend to GitHub Pages"]
    types: [completed]
    branches: [main]
  # 스케줄 기반으로 주기적 실행 (매 시간 15분에 실행)
  schedule:
    - cron: '15 * * * *'
  # 수동 트리거
  workflow_dispatch:
    inputs:
      backend_url:
        description: 'Backend base URL without /api (e.g., http://conduit-alb-xxx.elb.amazonaws.com)'
        required: false
        type: string
        default: 'https://d1ct76fqx0s1b8.cloudfront.net'
      frontend_url:
        description: 'Frontend URL (e.g., https://vibe-coding-paradigm.github.io/Realworld-serverless-microservice)'
        required: false
        type: string
        default: 'https://vibe-coding-paradigm.github.io/Realworld-serverless-microservice'
      force_run:
        description: 'Force run E2E tests even if recent deployments not found'
        required: false
        type: boolean
        default: false
  # 다른 워크플로우에서 호출할 때
  workflow_call:
    inputs:
      backend_url:
        description: 'Backend base URL without /api (e.g., http://conduit-alb-xxx.elb.amazonaws.com)'
        required: true
        type: string
      frontend_url:
        description: 'Frontend URL (e.g., https://vibe-coding-paradigm.github.io/Realworld-serverless-microservice)'
        required: true
        type: string

jobs:
  check-deployment-status:
    name: Check Both Deployments Are Successful
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run'
    outputs:
      should_run_tests: ${{ steps.check-status.outputs.should_run_tests }}
      backend_url: ${{ steps.get-urls.outputs.backend_url }}
      frontend_url: ${{ steps.get-urls.outputs.frontend_url }}
    steps:
      - name: Check deployment status
        id: check-status
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            // Get the SHA of the current commit that triggered this workflow
            const currentSha = context.payload.workflow_run.head_sha;
            const triggeringWorkflow = context.payload.workflow_run.name;
            console.log('Current commit SHA:', currentSha);
            console.log('Triggering workflow:', triggeringWorkflow);
            
            // Wait a bit to ensure the triggering workflow has time to complete
            await new Promise(resolve => setTimeout(resolve, 10000));
            
            // Get recent workflow runs for both deployments for this specific commit
            const backendRuns = await github.rest.actions.listWorkflowRunsForRepo({
              owner,
              repo,
              workflow_id: 'backend-deploy.yml',
              branch: 'main',
              per_page: 20
            });
            
            const frontendRuns = await github.rest.actions.listWorkflowRunsForRepo({
              owner,
              repo,
              workflow_id: 'frontend-deploy.yml',
              branch: 'main',
              per_page: 20
            });
            
            // Find runs for the current commit
            const backendRun = backendRuns.data.workflow_runs.find(run => run.head_sha === currentSha);
            const frontendRun = frontendRuns.data.workflow_runs.find(run => run.head_sha === currentSha);
            
            console.log('Backend run for current SHA:', backendRun?.conclusion, backendRun?.status, backendRun?.created_at);
            console.log('Frontend run for current SHA:', frontendRun?.conclusion, frontendRun?.status, frontendRun?.created_at);
            
            // Check if both deployments exist and are successful
            const backendComplete = backendRun?.status === 'completed' && backendRun?.conclusion === 'success';
            const frontendComplete = frontendRun?.status === 'completed' && frontendRun?.conclusion === 'success';
            
            // Additional check: if one deployment is missing, maybe it wasn't triggered (no changes in that path)
            const backendExists = !!backendRun;
            const frontendExists = !!frontendRun;
            
            console.log(`Backend deployment exists: ${backendExists}, completed successfully: ${backendComplete}`);
            console.log(`Frontend deployment exists: ${frontendExists}, completed successfully: ${frontendComplete}`);
            
            let shouldRun = false;
            let reason = '';
            
            if (backendExists && frontendExists) {
              // Both deployments exist - wait for both to be successful
              shouldRun = backendComplete && frontendComplete;
              if (!shouldRun) {
                reason = `Waiting for both deployments to complete. Backend: ${backendRun?.status}/${backendRun?.conclusion}, Frontend: ${frontendRun?.status}/${frontendRun?.conclusion}`;
              } else {
                reason = 'Both deployments completed successfully';
              }
            } else if (backendExists && !frontendExists) {
              // Only backend deployment exists - check if it's because frontend wasn't changed
              shouldRun = backendComplete;
              reason = shouldRun ? 'Backend deployment successful, no frontend deployment needed' : `Waiting for backend deployment. Status: ${backendRun?.status}/${backendRun?.conclusion}`;
            } else if (!backendExists && frontendExists) {
              // Only frontend deployment exists - check if it's because backend wasn't changed
              shouldRun = frontendComplete;
              reason = shouldRun ? 'Frontend deployment successful, no backend deployment needed' : `Waiting for frontend deployment. Status: ${frontendRun?.status}/${frontendRun?.conclusion}`;
            } else {
              // Neither deployment exists for this commit - this shouldn't happen
              shouldRun = false;
              reason = 'No deployments found for this commit SHA';
            }
            
            console.log(`Decision: ${shouldRun ? '✅ Run tests' : '⏳ Wait'} - ${reason}`);
            core.setOutput('should_run_tests', shouldRun);

      - name: Get deployment URLs
        id: get-urls
        if: steps.check-status.outputs.should_run_tests == 'true'
        run: |
          # Set default URLs (these will be used for workflow_run triggers)
          BACKEND_URL="https://d1ct76fqx0s1b8.cloudfront.net/api"
          FRONTEND_URL="https://vibe-coding-paradigm.github.io/Realworld-serverless-microservice"
          
          echo "backend_url=$BACKEND_URL" >> $GITHUB_OUTPUT
          echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          echo "✅ Using backend URL: $BACKEND_URL"
          echo "✅ Using frontend URL: $FRONTEND_URL"

  e2e-tests:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [check-deployment-status]
    if: always() && (github.event_name != 'workflow_run' || needs.check-deployment-status.outputs.should_run_tests == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: frontend
      run: npm ci

    - name: Install Playwright browsers
      working-directory: frontend
      run: npx playwright install --with-deps

    - name: Set URLs based on trigger type
      id: set-urls
      run: |
        if [ "${{ github.event_name }}" = "workflow_run" ]; then
          # Use URLs from check-deployment-status job
          BACKEND_URL="${{ needs.check-deployment-status.outputs.backend_url }}"
          FRONTEND_URL="${{ needs.check-deployment-status.outputs.frontend_url }}"
        else
          # Use inputs for workflow_call and workflow_dispatch
          BACKEND_URL="${{ inputs.backend_url }}"
          FRONTEND_URL="${{ inputs.frontend_url }}"
        fi
        
        echo "backend_url=$BACKEND_URL" >> $GITHUB_OUTPUT
        echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT
        echo "✅ Using backend URL: $BACKEND_URL"
        echo "✅ Using frontend URL: $FRONTEND_URL"

    - name: Validate URLs
      run: |
        if [ -z "${{ steps.set-urls.outputs.backend_url }}" ]; then
          echo "❌ Error: backend_url is not set"
          exit 1
        fi
        if [ -z "${{ steps.set-urls.outputs.frontend_url }}" ]; then
          echo "❌ Error: frontend_url is not set"
          exit 1
        fi

    - name: Wait for backend to be ready
      run: |
        BACKEND_URL="${{ steps.set-urls.outputs.backend_url }}"
        # Check if backend_url already contains /api, if so, remove it for health check
        if [[ "$BACKEND_URL" == *"/api" ]]; then
          HEALTH_URL="${BACKEND_URL%/api}/health"
        else
          HEALTH_URL="$BACKEND_URL/health"
        fi
        echo "Waiting for backend at $HEALTH_URL to be ready..."
        for i in {1..30}; do
          if curl -s "$HEALTH_URL" | grep -q "ok"; then
            echo "Backend is ready!"
            break
          fi
          echo "Attempt $i: Backend not ready, waiting..."
          sleep 10
        done

    - name: Wait for frontend to be ready
      run: |
        FRONTEND_URL="${{ steps.set-urls.outputs.frontend_url }}"
        echo "Waiting for frontend at $FRONTEND_URL to be ready..."
        for i in {1..30}; do
          RESPONSE=$(curl -sL -H "User-Agent: Mozilla/5.0 (compatible; E2E-Test/1.0)" "$FRONTEND_URL" || echo "")
          if echo "$RESPONSE" | grep -q "Vite + React\|RealWorld\|<div id=\"root\">"; then
            echo "Frontend is ready and serving React app!"
            break
          fi
          echo "Attempt $i: Frontend not ready or not serving React app, waiting..."
          sleep 10
        done
        
        # Final verification
        if ! curl -s -H "User-Agent: Mozilla/5.0 (compatible; E2E-Test/1.0)" "$FRONTEND_URL" | grep -q "Vite + React\|RealWorld\|<div id=\"root\">"; then
          echo "⚠️ Warning: Frontend may not be fully ready"
          echo "Continuing with tests as Global Setup will handle additional retries..."
        fi

    - name: Run E2E tests
      working-directory: frontend
      env:
        API_URL: ${{ steps.set-urls.outputs.backend_url }}
        PLAYWRIGHT_BASE_URL: ${{ steps.set-urls.outputs.frontend_url }}
      run: |
        echo "🔧 E2E Test Configuration:"
        echo "Backend URL: $API_URL" 
        echo "Frontend URL: $PLAYWRIGHT_BASE_URL"
        # backend_url should already include /api if from CloudFront
        if [[ "$API_URL" == *"/api" ]]; then
          echo "Health Check URL: ${API_URL%/api}/health"
          echo "Articles API URL: $API_URL/articles"
        else
          echo "Health Check URL: $API_URL/health"
          echo "Articles API URL: $API_URL/api/articles"
        fi
        npm run test:e2e

    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: frontend/test-results/
        retention-days: 30

    - name: Comment test results on PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && always()
      with:
        script: |
          const fs = require('fs');
          const path = './frontend/test-results/results.json';
          
          if (fs.existsSync(path)) {
            const results = JSON.parse(fs.readFileSync(path, 'utf8'));
            const { stats } = results;
            
            const body = `
          ## 🎭 E2E Test Results
          
          - **Total Tests**: ${stats.total}
          - **Passed**: ${stats.passed} ✅
          - **Failed**: ${stats.failed} ❌
          - **Skipped**: ${stats.skipped} ⏭️
          
          ${stats.failed > 0 ? '⚠️ Some tests failed. Please check the detailed report in the workflow artifacts.' : '🎉 All tests passed!'}
          
          **Test Report**: Available in workflow artifacts
          `;
          
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }