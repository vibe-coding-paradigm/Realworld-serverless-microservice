name: E2E Tests

on:
  workflow_call:
    inputs:
      backend_url:
        description: 'Backend API URL for testing'
        required: true
        type: string
      frontend_url:
        description: 'Frontend URL for testing'
        required: true
        type: string

jobs:
  e2e-tests:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: frontend
      run: npm ci

    - name: Install Playwright browsers
      working-directory: frontend
      run: npx playwright install --with-deps

    - name: Validate required inputs
      run: |
        if [ -z "${{ inputs.backend_url }}" ]; then
          echo "‚ùå Error: backend_url input is required"
          exit 1
        fi
        if [ -z "${{ inputs.frontend_url }}" ]; then
          echo "‚ùå Error: frontend_url input is required"
          exit 1
        fi
        echo "‚úÖ Using backend URL: ${{ inputs.backend_url }}"
        echo "‚úÖ Using frontend URL: ${{ inputs.frontend_url }}"

    - name: Wait for backend to be ready
      run: |
        API_URL="${{ inputs.backend_url }}"
        echo "Waiting for backend at $API_URL to be ready..."
        for i in {1..30}; do
          if curl -s "$API_URL/health" | grep -q "ok"; then
            echo "Backend is ready!"
            break
          fi
          echo "Attempt $i: Backend not ready, waiting..."
          sleep 10
        done

    - name: Wait for frontend to be ready
      run: |
        FRONTEND_URL="${{ inputs.frontend_url }}"
        echo "Waiting for frontend at $FRONTEND_URL to be ready..."
        for i in {1..30}; do
          RESPONSE=$(curl -s -H "User-Agent: Mozilla/5.0 (compatible; E2E-Test/1.0)" "$FRONTEND_URL" || echo "")
          if echo "$RESPONSE" | grep -q "Vite + React\|RealWorld\|<div id=\"root\">"; then
            echo "Frontend is ready and serving React app!"
            break
          fi
          echo "Attempt $i: Frontend not ready or not serving React app, waiting..."
          sleep 10
        done
        
        # Final verification
        if ! curl -s -H "User-Agent: Mozilla/5.0 (compatible; E2E-Test/1.0)" "$FRONTEND_URL" | grep -q "Vite + React\|RealWorld\|<div id=\"root\">"; then
          echo "‚ö†Ô∏è Warning: Frontend may not be fully ready"
          echo "Continuing with tests as Global Setup will handle additional retries..."
        fi

    - name: Run E2E tests
      working-directory: frontend
      env:
        API_URL: ${{ inputs.backend_url }}
        PLAYWRIGHT_BASE_URL: ${{ inputs.frontend_url }}
      run: npm run test:e2e

    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: frontend/test-results/
        retention-days: 30

    - name: Comment test results on PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && always()
      with:
        script: |
          const fs = require('fs');
          const path = './frontend/test-results/results.json';
          
          if (fs.existsSync(path)) {
            const results = JSON.parse(fs.readFileSync(path, 'utf8'));
            const { stats } = results;
            
            const body = `
          ## üé≠ E2E Test Results
          
          - **Total Tests**: ${stats.total}
          - **Passed**: ${stats.passed} ‚úÖ
          - **Failed**: ${stats.failed} ‚ùå
          - **Skipped**: ${stats.skipped} ‚è≠Ô∏è
          
          ${stats.failed > 0 ? '‚ö†Ô∏è Some tests failed. Please check the detailed report in the workflow artifacts.' : 'üéâ All tests passed!'}
          
          **Test Report**: Available in workflow artifacts
          `;
          
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }